#!/usr/bin/env node

/**
 * Module dependencies
 */
const app = require('../app')
const http = require('http')
const fs = require('fs')
const https = require('https')

/**
 * Get port from environment and store in Express
 */
const port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

if (process.env.NODE_ENV != "develope") {


  // Certificate
  const privateKey = fs.readFileSync('/etc/letsencrypt/live/apiproservice.ddns.net/privkey.pem', 'utf8');
  const certificate = fs.readFileSync('/etc/letsencrypt/live/apiproservice.ddns.net/cert.pem', 'utf8');
  const ca = fs.readFileSync('/etc/letsencrypt/live/apiproservice.ddns.net/chain.pem', 'utf8');
  const credentials = {
    key: privateKey,
    cert: certificate,
    ca: ca
  };

  const httpsServer = https.createServer(credentials, app)
  httpsServer.listen(443)
  httpsServer.on('error', onError)
  httpsServer.on('listening', onListening)

}



/**
 * Create HTTP server
 */
const server = http.createServer(app)
/**
 * Listen on provided port, on all network interfaces
 */
server.listen(port)
server.on('error', onError)
server.on('listening', onListening)



/**
 * Normalize a port into a number, string, or false
 */
function normalizePort(val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // Named pipe
    return val
  }

  if (port >= 0) {
    // Port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // Handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event
 */
function onListening() {
  const addr = server.address()
  const uri = typeof addr === 'string' ? addr : `http://localhost:${addr.port}`
  console.log(`Listening on ${uri}`)
}